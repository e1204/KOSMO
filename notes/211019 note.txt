
함수 오버로딩 - 같은 이름, 타입, 갯수
========================
this 용도 = this 함수, this로 변수 접근
=========================
String =  ==(주소비교).
equals,
concat,
subString(2,3),
str1.compare(str2)

 등등 ...
=========================
index는 0부터 시작


=========================
charAt(i) 란 글자 한 개 한 개 뽑아내는 것.
i는 index를 뜻함. 0부터 의미

=========================


10월 19일

기본 자료형의 값을 문자열로 바꾸기 
double e = 2.718281;
             ↙
String se = String.valueOf(e);     <<class명 . 으로 시작하니까 String이 static임

String.valueOf는 String타입으로 변환시 킬때 쓴다.
=========================

문자열 대상 + 연산과 += 연산
System.out.println("funny" + "camp");
컴파일러에 의한 자동 변환
System.out.println("funny".concat("camp"));
우리가 아는 +연산은 내부적으로 concat을 이용해서 붙이는 거였음.

concat은 단순이 붙이는 것.
=========================
문자열과 기본 자료형의 +연산

String str = "age: " +17;
	↙ x
String str = "age: " .concat(17);

	?

String str = "age: " +17;
	↙  o
String str = "age: " .concat(String.valueOf(17)); 문자열 일칠
=========================
concat 메소드는 이어서 호출 가능
=========================
문자열 결합의 최적화를 하지 않을 경우

String birth = "<양>" + 7 + ' . ' + 16 ;
	  문자열타입  숫자  

String은 불변이라 내부적으로 메모리 소모가 상당함.

   
=========================

subString(0)이랑 charAt(0) 
subString(0)는 짤라내어서 메모리에 다시 생성 charAt(0) 메모리에 
다시 생성 시키지 않고 해당 코드값만 받아 옴.
subString(0)는 리턴값이 String charAt(0)리턴값이 char 타입

=========================
StringBuilder

=========================
StrinBuffer

쓰레드에 안전

-------------------------------------------
-------------------------------------------
https://github.com/bigheada35/
[  12장  ]

toString메소드 (조금 특이한 메소드)
단순하게 자기자신의 문자열을 반환하고 있음

@Override  //<< 원래는 이거 붙여주는게 맞음
	public String toString() {
		
		return conts; //문자열 반환
	}
		
만약에 정의를 안하면 주소를 뿌린다.


=========================

문자열의 조합 printf 메소드
포맷을 지정할 수 있다.

예전에 c언어 printf라는게 있었는데 예전 개발자들 흡수를 위해
고슬링이 그대로 가져옴 ㅋㅋ

System.out.printf( " 정수는 %d, 실수는 %f, 문자는 %c  ", 12, 24.5, 'A'  );
근데 자바에서는 잘 안 씀.


//FormatString
public class PrintF {

	public static void main(String[] args) {
		int age = 21;
		double height = 180.2;
		String name = "CHOI BEOM GYU";
		
		System.out.printf(" name: %s \n", name);  ◀%s는 String의 약자
		System.out.printf(" age: %d \n height: %e \n\n", age, height); ◀%e부동 소수점
		
		System.out.printf(" %d - %o - %x \n\n", 77, 77, 77);
		System.out.printf(" %g \n", 0.00014); ◀소숫점 자리가 6자리 이하면 %g
		System.out.printf(" %g \n", 0.000014); 

	}

}



=========================


콘솔 입력 Scanner

sc . close ( ) ;  ◀스캐너 사용 종료.
근데 이거 마구 사용하면 안됨. 한 번만 사용해야 함.
왜냐면 내부적으로 문제가 있어서 
close해버리면 다른 것도 다 꺼짐 ㅋㅋㅋ
Scanner sc = new Scanner (System.in);
이걸 보면 괄호 안에 system.in으로 되어있지? 시스템적으로 움직인다는 말이야
그러니 close를 해버리면 system이 다 꺼져버리는거지 


-------------------------------------------
-------------------------------------------
https://github.com/bigheada35/
[  13장. 배열  ]
여기서 상속을 배우게 된다.

1차원 배열의 이해와 활용

알고리즘 문제도 3차원까지도 잘 안 나감.
만야겡 3차원까지 가면 어딘가 문제가 있음.
항공우주 국방정도 가야 쓸까말까 함


1차원 배열? 타입이 같은 둘 이상의 데이터를 저장할 수 있는 1차원 구조의 메모리 공간
public static void main(String[] args) {
배열? [ ] 이 스템플러를 배열이라고 함

int [ ] arr ; 

데이터 타입은 int 배열 형, 변수명은 arr.

9개 데이터 타입 중 int [ ] 은 어디에 속할까? 참조형. (8개 데이터 타입 + 그외는 모두 참조형)
따라서 어레이(arr)에는 주소가 옴.

int [ ] arr = new int [ 5 ] ;  ◁배열 선언

배열은 조금 특별함

int [ ] ref = new int [5];
ref라는 이름으로 데이터 타입을 잡고 
int [5]는 int값이 들어갈 방 다섯개를 잡아주는 것을 의미

가장 중요한 부분은.. 배열은 무족권 무조건! 연속적인 공간을 잡아 줌. 공간이 연결되었다 이 말이야~

int [ ] ref = new int [5];
int num 1;
int num 2;
int num 3;
int num 4;
int num 5;
위 아래 차이 점은 메모리 주소의 연속성이다. 방을 나란히 잡냐 아니냐.

double[ ] ar2 = new double [ 7 ] ;  7*8 = 56 








★ 로또 번호 구하기 ★
1. int 담는 6개 배열 선언
2. 각각의 배열에 랜덤으로 1 ~ 45 (랜덤함수 담기)
3. 중복 제거 (제일 중요 ㅋㅋ) 해서 6개 출력










