

어제거 복습
//어제 마지막에 한 거 답 맞는지 확인하는 시간
class Song{
	

	String title;
	String artist;
	int year;
	String country;

	Song(int year, String country, String artist, String title) {
		this.title = title;
		this.artist = artist;
		this.year = year;
		this.country = country;
	}

	void show() {
		System.out.println(year + "년, " + country + " 국적의 " + artist + "가 부른 " + "\"" + title + "\"");

	} //'\"' 이렇게 적어도 됨

}
	
public class SongTest {

	public static void main(String[] args) {
		
		Song song = new Song(1978, "스웨덴", "ABBA", "Dancing Queen");

		song.show();

		

	}

}





디폴트 생성자 안 넣어도 기본적으로 돌아는 감.
하지만 돌아는 가는데 . 명세서 설명서(고객님이)에 넣으라 하면 넣어야 되요.


 생성자 2개: 기본 생성자와 매개변수로 모든 필드를 초기화하는 생성자




<<수업시작>>


javac하게되면 컴파일잉니까 0101덩어리인 .class로 만드는 작업을 한다

set classpath는 .class 파일을 내가 어디에 놔뒀는지 알려줌
C:\PackageStudy>set classpath=.; (.현재폴더 ; 없으면 이 다음에 나오는 곳에서 찾으셈)



★ 절대경로  &   상대경로  ★ (웹프로그래밍 ↑, 학생들이 많이 헷갈려함)



경로를 표시하는데 

▶절대경로: 최상위 디렉토리로 시작하는 것 (씨땡 C.)

▶상대경로: 기준자체가 자기자신

cmd에서 딱 2개만 알면된다

명령 프롬프트에서 dir/w 치면 내 위치에 있는 파일들이 주욱 뜸


Change Directory > cd.. 치면 

C:\User\kosmo>cd..
상위 폴더인 유저폴더로 감
C:\User\>cd.
C:\User\>dir/w 
내위치.
여기 cd떙떙 치면 
C:\User\>cd..
한 번 더 상위 폴더로 감. 그래서 C폴더로 슝,,
C:\>cd.



클래스  패스 고정시키는 방법


▶패키지의 이해(이제 부터 중요함)
: 클래스 이름이 같으면 오류가 발생하는데 이를 해결할 수 있는 것이 패키지이다.


▶패키지 만들기
src 오른쪽 버튼 > new > package > Name: com.wxfx.smart

▶class이름과 좌측 이름 맞추는 방법
좌측 이름 우클릭 >refactor>rename


패키지 만들면 show in 으로 확인했을 때 폴더명이 패키지명인 것을 확인 할 수 있다.




(상황)개발회사 다니는데 Circle 만드는 것을 외주하게 되었다. 




패키지 선언 이런건 우리가 따로 명령프롬 안쓰고 이클립스가 다 해줌




//import는 패키지 하나만 가능하고 
//나머지 패키지는 밑에처럼 다이렉트로 적음

import ccom.wxfx.smart.Song;
import com.fxmx.simple.Song; 


public class SongTest {

	public static void main(String[] args) {
		
		Song s= new Song();
		
		com.fxmx.simple.Song s1= new com.fxmx.simple.Song();
		

	}

}






검색옵션: *java* 중간에 java라고 적힌 모든 애들을 찾아주세요

*는 전체 all 을 뜻함
import com.wxfx.smart.*;
전체를 뜻함





▶정보은닉 그리고 캡슐화 (면접때 자주 나옴 )


OOP(객체지향 언어)(Java) <-> 절차지향 언어 (C언어)

절차지향언어: 딱 변수와 함수만 존재
기술이 발전하면서 전공자들이 객체지향 언어에 대한 논문들이 쏟아짐 ing

절차지향에 없던 것들을 추가 발전 시킨게 객체지향 언어


/현실세계 = 추상화(현실세계를 0101덩어리로 억지로 바꿈)

class Person{
 int leg = 4
 int eyes = 2;
 int fingers = 5;
...

void walk(){
	sysout("걷는다");
}
void walk(){
	sysout("본다");
}

}




▶OOP의 특징: (=객체지향 언어란)

1.상속 Inheritance
2.정보은닉 Hidden Information
3.다형성(자바의 80% 지분) 
4.캡슐화 Incapsulatoin : 소프트웨어의 최종 목적

해외에서는 반.드.시 이 4개 중 하나이상 물음
그리고 소스코드상 어떤지 반드시 알아두롸


▶정보를 은닉해야 하는 이유

 



private을 어두에 넣으면 access modifier(접근 제한자)를 한다.

접근 제한자 4가지 : public ▷ protected ▷ default ▷ private

public (클래스 정의 대상) 모든 패키지
default(클래스 정의 대상) 같은 패키지 내에서만 접근 제한
protected (상속관련)
private 같은 클래스 내에서만 가능. 같은 패키지도 안됨.





import a.A;
public class AccessTest {
	public AccessTest() {
		A a = new A(); //객체생성		
	}
}




//public 떼면 위에거 compile 에러뜸
package a;
class A {   

}


해당 클래스에 public을 붙이면 
package이름이 다른 곳에서도 써먹을 수 있다는 뜻.
public class A { }

public은 공공의 << 라는 뜻. class A를 어디서든 써먹을 수 있게 한다는 말



public이 아무것도 안 붙은 상태를 default라고 한다.
디폴트는 접근 제한이 같은 패키지 내


public은 접근 제한이 다른 패키지까지 가서 객체 생성이 가능하다.






정보 은닉. Hidden Information

C언어에서는 음수가 문제가 되었음. 막는 방법이 없었으니까
private을 넣어서 음수를 적었을떄 컴파일 오류로 이어지게 함.
이게 바로 정보 은닉.

내가 Rectangle짰는데 -45가 나옴. 
그랬을떄 소스코드를 짜서 이것을 잡아냄.
한 번 걸러내는 것 이것이 정보 은닉.
//멤버변수에 private 주고 외부에서 함수 생성해서 막았습니다.  (?)
멤버변수의 값을 컨트롤 할 때 오류를 피하기 위해 set함수를 통해서
변수값을 컨트롤 할 수 있도록 사용하는 것
//set함수 get함수를 한 개 한 개 만들어주는 이유도 여기 있다 . (흠...

	private int width;
	private int height;
	
	public void setWidth(int width){
		if(width <0) {
			width = 0;
			return;
		}
		this.width = width;
	}
정보은닉 시키는 소스코드 방법 중 하나 






4.캡슐화 Incapsulatoin : 소프트웨어의 최종 목적
국내에선 정보은닉을 캡슐화로 보는 곳이 있지만해외에서는 둘을 구분함.
최종 사용자가 최대한 사용하기 편하도록 프로그램을 짜는 것.
최종 사용자라는 것은 아까처럼 Triangle Circle 이런 것을 외주 맡김.
Song 객체도 만들고 어쩌고 저쩌고 별거 다 해야 함 
외주업체가 짜준 것을 합쳐서 최종적으로 응용프로그램을 만들어야 해.
...
이것을 캡슐화가 잘 되었다 라고 함




// 화폐 매수 구하는 프로그램을 객체로 만드시오.


메인을 가진 애를 지정한다.
public class MoneyMain {

	public static void main(String[] args) {

		Money money = new Money(126000);

		money.show();

	}

}

그후 ctrl C ctrl V 해서 money 클래스 하나 더 만들어.

메인에 있는Money money = new Money(126000); //인스턴스로 가지고있다는 의미


class Money {
	private int money;
	
	Money(int money) {
		this.money=money;
	}

	 public void show() {

		System.out.println("오만원 : " + money / 50000 + "장");
		money = money % 50000;

		System.out.println("만원 : " + money / 10000 + "장");
		money = money % 10000;

		System.out.println("오천원 : " + money / 5000 + "장");
		money = money % 5000;

		System.out.println("천원 : " + money / 1000 + "장");
		money = money % 1000;

		System.out.println("오백원 : " + money / 500 + "개");
		money = money % 500;

		System.out.println("백원 : " + money / 100 + "개");
		

	}

}











//잘못된 입력입니다.




public class MoneyMain {

	public static void main(String[] args) {

		Money money = new Money(-126000);

		//money.show();

	}

}

다른 클래스에 음수 이하 돈들어 오는 것을 막음
class Money {
	private int money;
	
	Money(int money) {
		
		setMoney(money);
	
		}
	
	public void setMoney(int money) {	
		if(money <0) {
			this.money=0;
			System.out.println("잘못된 입력입니다.");
			return;
		}
		
		this.money=money;
	}

	 public void show() {

		System.out.println("오만원 : " + money / 50000 + "장");
		money = money % 50000;

		System.out.println("만원 : " + money / 10000 + "장");
		money = money % 10000;

		System.out.println("오천원 : " + money / 5000 + "장");
		money = money % 5000;

		System.out.println("천원 : " + money / 1000 + "장");
		money = money % 1000;

		System.out.println("오백원 : " + money / 500 + "개");
		money = money % 500;

		System.out.println("백원 : " + money / 100 + "개");
		

	}

}






















