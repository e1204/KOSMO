2021-10-20 수요일

int index = word.indexOf('.');


어제 인스턴스 대상 1차원 배열 까지 배웠다.
참조형도 배열로 배열할 수 있다.
Circle이랑 Rectangle도 배열을 통해 사용할 수 있다.

값을 리드하는 방법은 
int [] ar = new int[3];
ar[0] = 7; 
ar[1] = 8; 
ar[2] = 9; 
이런식으로 
=========================

◈13장. 값의 저장과 참조의 예

◐Box를 배열로 만들어보자
우리가 만든 class형(참조형을)을 배열로 선언할 수 있따.
배열로 할 떄는 참조형을 어케하느냐
new해서 넣는다


▶class Box{
	private String conts;
	
	Box(String cont){ this.conts = cont;}
	public String toSting() {
		return conts;
	}
}

public class ArrBox {
	public static void main(String[] args) {
		Box[] ar = new Box[3];
		
		// 배열에 인스턴스 저장
		ar[0] = new Box("First");
		ar[1] = new Box("Second");		
		ar[2] = new Box("Third");
		
		// 저장된 인스턴스의 참조
		System.out.println(ar[0]);
		System.out.println(ar[1]);
		System.out.println(ar[2]);
		

	}
}

이것을 메모리 그림으로 그려보즈앙
(그림판으로 그림)


=========================


◐배열기반 반복문 활용의 예
▶public class ArrBox {
	public static void main(String[] args) {
		
		String[] sr = new String[7];
		sr[0] = new String("Java");
		sr[1] = new String("System");
		sr[2] = new String("Compiler");
		sr[3] = new String("Park");
		sr[4] = new String("Tree");
		sr[5] = new String("Dinner");
		sr[6] = new String("Brunch cafe");
		
		int cnum = 0;
		for(int i = 0; i < sr.length; i++) 
			cnum += sr[i].length();
			
		System.out.println("총 문자의 수: " +cnum);
		

	}

}


배열을 안쓰고 만드려면 
String str1 = " ABCD"
String str2 = " ... 

이렇게 만들어야하는데

전체 문자 갯수 몇 갠지 뽑아와봐. 
이랬을 떄 예전에는 한 개 한 개 쩜 랭스 이랬는데 

이제는 배열을 사용


=========================

◐연습하기

Circle을 배열로 5개 선언

해당 객체에 인덱스 순서대로 반지름 설정

해당 배열에 있는 Circle의 총넓이의 합을 구하시오

▶
package edu.kosmo.ex.shape;

public class CircleArr {

	private double r;

	public CircleArr(double r) {
		this.r = r;

	}

	▷반지름 확인하고 싶을 시 추가해서 r을 뽑아낸다.
	public double getR() {
		return r;
	}

	▷반지름 확인하고 싶을 시 추가해서 r을 뽑아낸다.
	public void setR(double r) {
		this.r = r;
	}

	public double getArea() {
		return r * r * Math.PI;
	}

}


▶▶
package edu.kosmo.ex.main;

import edu.kosmo.ex.shape.CircleArr;

public class CircleArrTest{
	public static void main(String[] args) {
		
		CircleArr c = new CircleArr(3);
		System.out.println(c.getArea());
		
		
		
		CircleArr[] cirArr = new CircleArr[5]; 
		▷배열에대해서는 생성자가 없음. 그래서 그냥 다섯개 스템플러 떄려넣어

		
		cirArr[0] = new CircleArr(1);
		cirArr[1] = new CircleArr(1);
		cirArr[2] = new CircleArr(1);
		cirArr[3] = new CircleArr(1);
		cirArr[4] = new CircleArr(1);
		▷Circle을 넣을 다섯 개 방이 생김
		
		
		for(int i = 0; i<cirArr.length; i++) {
			int r = (int)((Math.random()*100)+1);
			cirArr[i] = new CircleArr(r); 
			▷여기까지가 원 입력
		}
		
		▷총 원넓이 계산
		double sum = 0;
		
		for(int i =0; i < cirArr.length; i++) {
			sum = sum + cirArr[i].getArea();
			//sum += cirArr[i].getArea();
			
			▷반지름 확인하고 싶을 시 class ArrCircle에 게터세터 함수 만들면 됨.
			System.out.println("반지름: " + cirArr[i].getR());
			
		}
		System.out.println("총 넓이: " + sum);
		
	}

}



=========================

◐배열을 생성과 동시에 초기화



◐연습하기

Circle을 배열로 5개 선언

해당 객체에 인덱스 순서대로 반지름 설정

해당 배열에 있는 Circle의 총넓이의 합을 구하시오 

금방 만든 Circle 클래스에 아래의 함수를 만드시오.
-파라미터를 Circle 배열로 받아서 해당 배열에 들어 있는 Circle들에 
총 넓이를 리턴 하는 함수를 만드시오.

▶package edu.kosmo.ex.shape;

public class CircleArr {
	private double r;
	public CircleArr(double r) {this.r = r;}
	public double getR() {return r;}
	public void setR(double r) {this.r = r;}
	public double getArea() {return r * r * Math.PI;}
	
	//static 붙이면 메모리에 먼저 올라감.
	//그래도 한 번 써먹을 수 있으니
	public static double getArrArea(CircleArr[] cirArr) {
		double sum = 0;
		for(int i =0; i < cirArr.length; i++) {
			sum += cirArr[i].getArea();
			System.out.println("반지름: " + cirArr[i].getR());
		}
		return sum;		
	}
}

▶▶
package edu.kosmo.ex.main;
import edu.kosmo.ex.shape.CircleArr;
public class CircleArrTest{
	public static void main(String[] args) {
		CircleArr c = new CircleArr(3);
		System.out.println(c.getArea());
		CircleArr[] cirArr = new CircleArr[5]; 
		cirArr[0] = new CircleArr(1);
		cirArr[1] = new CircleArr(1);
		cirArr[2] = new CircleArr(1);
		cirArr[3] = new CircleArr(1);
		cirArr[4] = new CircleArr(1);

		for(int i = 0; i<cirArr.length; i++) {
			int r = (int)((Math.random()*100)+1);
			cirArr[i] = new CircleArr(r);	
		}
		double sum = 0;
		for(int i =0; i < cirArr.length; i++) {
			sum += cirArr[i].getArea();
			System.out.println("반지름: " + cirArr[i].getR());
		}
		System.out.println("총 넓이: " + sum);
		
		System.out.println("총 넓이: " + CircleArr.getArrArea(cirArr)); ◀
		System.out.println("총 넓이: " + cirArr[1].getArrArea(cirArr)); ◀
	}
}






static으로 올려놔도 전혀 




=========================

◐배열의 디폴트 초기화
기본 자료형 배열은 모든 요소 0으로 초기화
참조형일 땐 null로 초기화. String안에는 0을 못 넣으니까. 컴파일러가 넣어줌

◐ arraycopy 함수
배열을 좀 더 잘 다루기 위해 고슬링 아재가 재공하는게 있음.

◐fill : 배열 초기화 메소드
◐arraycopy : 배열 복사 메소드


((class명을 붙일 수 있는 건 기본적으로 static함수))

public class ArrayUtils {
	public static void main(String[] args) {
		int[] ar1 = new int[10];
		int[] ar2 = new int[10];
		
		Arrays.fill(ar1, 7);	▷배열 ar1을 7로 초기화
		System.arraycopy(ar1, 0, ar2, 3, 4);	▷ 배열 ar1을 ar2로 부분 복사
		
		for(int i = 0; i < ar1.length; i++)
			System.out.print(ar1[i] + " ");
		System.out.println();	▷단순 줄 바꿈
		
		for(int i =0; i < ar2.length; i++)
			System.out.println(ar2[i] + " ");
		

	}
}



선생님의 노하우▼      
System.arraycopy(ar1,  0,  ar2,  3,  4);
해석↘

                    스타트 위치    대상은 여기         몇 개 복사
System.arraycopy(ar1 [0],          ar2[3],                   4);



=========================

◐enhanced for문 (for-each문)
강화된 포문

▶public class EnhancedFor {
	public static void main(String[] args) {
		int ar[] = {1,2,3,4,5};
		for(int i =0; i < ar.length; i++) {
			System.out.println(ar[i]);
		}	
		//fore + ctrl + space
		for (int i : ar) { 		▷for each문
			System.out.println(i);
			
		}
	}
}
=========================

같은 for문에 ar이 오는데 
1를 뿌리고 그 다음에 i=2를 던지고 그 다음에 3, 4,... 언제까지? 5까지.
첨자([i])로 
문법적으로 순서대로 12345 던져 줌




◐enhanced for문
▶public class EnhancedFor {
	public static void main(String[] args) {
		int ar[] = { 1, 2, 3, 4, 5 };

		// 배열 요소 전체 출력
		for (int e : ar) {
			System.out.print(e + " ");
		}
		System.out.println(); // 단순 줄 바꿈을 목적으로

		int sum = 0;

		// 배열 요소의 전체 합 출력
		for (int e : ar) {
			sum += e;
		}
		System.out.println("sum: " + sum);
	}

}


=========================
◐인스턴스 배열 대상 for-each문의 예
enhanced for문 가져오는데 reference type도 가져온다?

	//배열에서 번호가 505인 Box를 찾아 그 내용물을 출력하는 반복문
	for (int e : ar) {
		if(e.getBoxNum() == 505)
			System.out.println(e);
		}


▶class Box1 {
	private String contents;
	private int boxNum;

	public Box1(int boxNum, String contents) {
		this.boxNum = boxNum;
		this.contents = contents;
	}

	public int getBoxNum() { 
		return boxNum;
	}
	
	//세터 없어도 되는 건 맞음. 그러나 현업에서는 무조건 게터 세터 넣고 감.
	//왜냐? 고객님이 뭘 사용할지 모르니까!
	public void setBoxNum(int boxNum) {
		this.boxNum = boxNum;
	}

	public String toString() {
		return contents;
	}
}


public class EnhancedForInst {
	public static void main(String[] args) {
		Box1[] ar = new Box1[5];
		ar[0] = new Box1(101, "Coffee");
		ar[1] = new Box1(202, "Computer");
		ar[2] = new Box1(303, "Apple");
		ar[3] = new Box1(404, "Dress");
		ar[4] = new Box1(505, "Fairy-tale book");

		
		for (Box1 e : ar) {
			//게터함수 만드는 방법: 게터함수 + 변수명
			if (e.getBoxNum() == 505)
				System.out.println(e); //내부적으로 toString을 호출하게 되어있음. 그래서 위에다가 toString함수를 만든 것.
		}
	}
}


=========================
◐오늘의 문제풀기

Rectangle을 배열로 3개 선언

해당 객체에 인덱스 순서대로 가로 세로 설정 - 
이번에는 반드시 scanner로 입력 받을 것

해당 배열에 있는 Rectanlge의 총 넓이의 합을 구하시오.

또한 아래의 함수도 만들 것(static으로 만들 것)
-파라미터를 Rectangle 배열로 받아서 해당 배열에 들어 있는
Rectangle들에 총 넓이를 리턴 하는 함수를 만드시오.

▶

import java.util.Scanner;

class Rectangle {

	private int width, height;

	public Rectangle(int width, int height) {
		this.height = height;
		this.width = width;
	}

	public int getArea() {
		return width * height;
	}
	/*
	 * public void setArea(int width, int heigh) { this.height = height; this.width
	 * = width; }
	 */

	// main에는 안 적어도 됨
	public static int getRecArea(Rectangle[] rec) {
		int sum = 0;
		for (int i = 0; i < rec.length; i++) {
			sum += rec[i].getArea();
			// System.out.println("총 넓이: " + rec[i].getArea());
		}
		return sum;

	}

}

public class ArrRec {
	public static void main(String[] args) { // 생성자를 안 만들었따. 이게 핵심

		Scanner sc = new Scanner(System.in);
		System.out.println("가로와 세로를 입력하세요");

		int width, height;

		Rectangle[] rec = new Rectangle[3];

		// rec.length 세번돌아간다. >> for문으로 총 6개 입력
		for (int i = 0; i < rec.length; i++) {
			System.out.println("가로: ");
			width = sc.nextInt();
			System.out.println("세로: ");
			height = sc.nextInt();

			new Rectangle(width, height);
			rec[i] = new Rectangle(width, height);

		}

		/*
		 * for (int i = 0; i < rec.length; i++) { int width = (int) (Math.random() * 100
		 * + 1); int height = (int) (Math.random() * 100 + 1); rec[i] = new
		 * Rectangle(width, height); }
		 */

		System.out.println("총 넓이: " + Rectangle.getRecArea(rec));
		// System.out.println("총 넓이: " + rec[1].getRecArea(rec)); <<static으로 하면 이게 필요없다.

	}
}




















