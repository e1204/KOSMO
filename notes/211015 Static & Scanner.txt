10장. static (11장은 담주에)


class 하나 당 파일 하나!! 

패키지 만들기
edu.kosmo.ex.dept
edu.kosmo.ex.main : 메인을 가진 클래스들을 따로 관리 하겠다.

그 뒤 웅앵 main에 EmployeeTEST 만들고 이걸 복붙해서 웅앵 DEPT에 넣는다.
DEPT 패키지에서 클래스 이름 Employee 한 다음에 파일을 rename 해준다.


class 앞에 public있으면 다른 모든 패키지에서도 사용 가능하다는 의미

employee애들 다 만든 뒤

main 에 employeeTest 복붙해서 rectangleTest 만들어

그후 package edu.kosmo.ex.dept; 를 복붙해서 package edu.kosmo.ex.shape;로 이름 바꿔





[     10장    ]

이 업계 신입들이 컴공과 포함 전공 불문, 접근제한자(access modifier)를 
잘 모르고 들어오는 경우가 수두룩 하다.

( 예시1 )
다른 패키지에 있는 애들을 와리가리 치면서 프로그래밍 하고 있었음.
그런데!!
메인에 Circle c = new Circle (1,2,2,2); 쓰고
class Circle 했는데도 오류라고 뜬다. 왤까!?

그것은 바로.. class 앞에 default가 생략되었기 때문.
class 앞에 public 쓰고 메인에 import 웅앵 추가해주면 오류 잡힘.

둘이 다른 패키지에 있어서 오류 발생한 것이 근본 문제였음. 암튼 public 추가하면 됨

( 예시2 )
void show(){  } 적었는데도 main의 r.show();가 오류 발생
얘도 패키지가 다른 와중에void show(){  } 앞에 default가 생략되어 패키지가 달라서 호출이 안되는 중인겨.
그래서 public을 앞에 추가하고 import웅앵을 메인에 넣어주면 둘이 교류되기 시작하고 
오류 잡힘.


(그 외 등등)
그렇다면 private은 뭐여? 바로 class 내. 그 화면 안에서만 교류하는 아이



선언된 클래스의 모든 인스턴스가 공유하는 클래스 변수

public class RectangleTest {
	public static void main(String[] args) {

여기서static이 뭘까용??

 



//공유변수, 클래스 변수, 정적 변수, static 변수 

[공유변수]
class InstCnt {
	static int instNum = 0;
	
	public InstCnt() {
		instNum++;
		System.out.println("인스턴스 생성: " + instNum);
	}
}


class ClassVar {	
	public static void main(String[]args) {
		InstCnt cnt1 = new InstCnt();
		InstCnt cnt2 = new InstCnt();
		InstCnt cnt3 = new InstCnt();
		
	}
}

출력
인스턴스 생성: 1
인스턴스 생성: 2
인스턴스 생성: 3

객체 끼리 공유하지 않으면 절대 3이 나올 수 없는 구조 (공유변수)


[클래스 변수]
class InstCnt {
	static int instNum = 0;
	
	public InstCnt() {
		instNum++;
		System.out.println("인스턴스 생성: " + instNum);
	}
}


class ClassVar {	
	public static void main(String[]args) {
		
		//InstCnt.instNum;
		System.out.println(InstCnt.instNum);
	}
}





***세미콜른 주의하기
***다른 패키지로 분리했을떄 public 주의하기







클래스 변수의 활용 예


static 붙여주면 메모리가 절약 됨. 

자기자신의 고유한 변수들은 static을 설정 할 수 없다.
	private int x, y, width, height;

각각의 이름이 다 있을텐데 
static String height 이런 식으로 하면 프로그래밍 세계를 떠나야함..

final static double PI는 공유할 수 있는 변수라서 STATIC 넣을 수 있음.


클래스메소드를 정의하는 경우 인스턴스 변수와 엮이면 안됨
왜냐? static자체에 인스턴스 변수가 못오기 떄문


System.out.println(...);
out은 클래스 System의 이름을 통해 접근. System 클래스의 클래스 변수 이름임을 유추.
println은 out이 참조하는 인스턴스의 메소드






java HelloTest란 jvm 올리고 jvm 안에 있는 HelloTest main을 찾음.
main부터 찾는 것. 이건 고슬링 아저씨가 찾은 공식.

static이란 new하기 전에 어떤 객체를 어떤 logic으로 실행해주셍요
인스턴스 생성과 관계 없이 static변수가 메모리 공간에 할당될때 실행




12장. 콘솔 입력과 출력
12-2 콘솔 입력

Scanner 클래스
import java.util.Scanner;

public class ScanningString {

	public static void main(String[] args) {
		String source = "1 3 5";
		
		//System.out.println("입력하세요");
		Scanner sc = new Scanner(System.in);
		
		int num1 = sc.nextInt(); //문자열 입력은 next
		int num2 = sc.nextInt();
		int num3 = sc.nextInt();
		
		//int sum = num1 + num2 + num3;
		//System.out.printf("%d + %d + %d = %d \n",num1, num2, num3, sum);
		
		
		String s1 = sc.next();
		System.out.println(s1);
		
		s1 = sc.next();
		System.out.println(s1);
		
		int sum = num1 + num2 + num3;
		System.out.printf("%d + %d + %d = %d \n",num1, num2, num3, sum);
		
		

	}

}




/*
출력값
10 20 30
바둑이
바둑이

영희야
영희야
10 + 20 + 30 = 60 */








int 값을 하나 입력 받아


원의 넓이를 구하는 프로그램을 짜시오.

단, Circle은 객체로 만들 것.

출력 예)
반지름을 입력 하세요.
100 
314입니다.

import java.util.Scanner;

class Circle9{
	private double r;
	
	Circle9(double r){
		this.r = r;
	}
	
	public double getArea() {
		return r * r * Math.PI;
	}
		
}

public class ScanningPractice {
	public static void main(String[] args) {
				
		//Circle의 100을 Scanner로 받아보자
		Scanner sc = new Scanner(System.in);
		System.out.println("반지름을 입력 하세요");		
		int radius = sc.nextInt();
		
		
		//객체 생성
		Circle9 c = new Circle9(radius);
		System.out.println(c.getArea());
				

	}

}




Rectangle 킄래스 작성
int 값 두 개 입력

출력
가로 세로 입력
100 200
넓이는 20000입니ㅏㄷ.








