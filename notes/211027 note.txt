21년 10월 27일


개별진철도
37번(오늘의1번)
interface + implements + @Override 사용하는거
public void print(String doc) 부분 활용을 생각해내지 못함. 
그래서 전날 연습하고 익힌거 진행을 잘 하지 못하고 해결하는데 5분 걸렸다.

38번(오늘의 2번)
전 날 수업 마지막에 고민하고 힘들어 했던 덕에 제대로 익힌 것 같다.
내가 실수 했던 부분이 기억이 잘 나서 해결이 빨랐고 56초 걸렸다 (뿌듯)



==============================================
챕터17

▣인터페이스에 선언되는 메소드와 변수
: 2개 들어갈 수 있는데 (1)상수 (2)추상 메소드

interface Printable {
   public void print(String doc);    ◀추상 메소드
}

interface Printable {
   public static final int PAPER_WIDTH = 70;  ◀상수
   public static final int PAPER_HEIGHT = 120;
   public void print(String doc);    ◀ 추상메소드
}


그래서 윈도우 업데이트 한다고 지 맘대로 컴터 껐다 켜지고 난리 치는거 
그거 다 .class 파일 교체하는 거 ㅋㅋ



기존 인터페이스를 수정하지 않는게 중요

문제가 생기는 이유는 기존 인터페이스에서 추상메소드 추가해서 수정하면
상속받는 애들 죄다 에러 생김

그래서 일단 인터페이스를 안 걸들면 기존 소스코드가 에러 날 일이 없음

그래서 상속받아서 인터페이스를 하나 더 만든느거야
그래서 다시 클래스를 만들어서 배포하는거
그러면 기존 거에서 문제가 생기지 않음

▣결론: 인터페이스도 문법적으로 상속이 가능하다
▶interface Printable {
	void print(String doc);
}

interface ColorPrintable extends Printable {  ☞☞인터페이스 간 상속도 extends로 표현
	void printCMYK(String doc);
}

☞기존 클래스 수정 불필요
class SPrinterDriver implements Printable {
	@Override
	public void print(String doc) {		
		System.out.println("From Samsung printer");
		System.out.println(doc);
	}
}
class LPrinterDriver implements Printable {
	@Override
	public void print(String doc) {
		System.out.println("From LG printer");
		System.out.println(doc);
	}
}

☞새로운 프린터 드라이버
class Prn909Drv implements ColorPrintable {
	@Override
	public void print(String doc) {			☞☞흑백출력
		System.out.println("black & white ver");
		System.out.println(doc);
	}

	@Override
	public void printCMYK(String doc) {		☞☞컬러출력
		System.out.println("CMYK ver");
		System.out.println(doc);
	}
}

public class InterfaceInheritance {
	public static void main(String[] args) {

		String myDoc = "This is a report about...";

		ColorPrintable prn = new Prn909Drv();
		prn.print(myDoc);

		System.out.println();
		prn.printCMYK(myDoc);

	}
}

▣앞에 interface에 default문법을 제공하기 시작함.
자바1.8부터 제공하기 시작해서 개발자들도 이거 있는지 잘 모름 ㅋㅋ
이게 왜 있냐면 인터페이스가 200개다? 그럼 상속을 계속 받아야함..
default를 붙이게 되면 body가 온다.
body를 붙이게 되면 프로그래밍이 가능해지면서 
자손이 반드시 구현하지 않아도 되는 printArea가 된다.
기존 것도 안 건드리고 
만약에 내가 colorprint를 제공하고 싶다하면 
printable을 상속 받은 다음에 overriding을 시키던지 안 시키던지 상관이 없음.
기존에 extends 안 쓰고 default만 붙이고 수정 가능해짐
누가 이런 걸 제공해줬다고? 고슬링 아재가..
현업에서 default를 안 쓰면 힘들어져요 왜냐? 상속을 엄청 해야 해 

===================================
c, c++
visual basic;
...
..
1994년 인터넷 시대
1.0 > jsp(서버 프로그램)  : 점유율 확 높아짐
...
1.5에서 많은 업데이트가 있었음
...
1.8 이게 람다어스트림을 지원함
...


아직까지 은행권은 1.2 쎄고 쎘음 ㅋㅋㅋㅋ 
그래서 1.8 버전으로 개발했는데 적용했더니 1.2버전이고 이런거 많음 ㅋㅋ

===================================


▣인터페이스도 static이 있다고 클래스의 스태틱과 같음.
【클래스명. 】 으로 호출. 
ex)  printable.printer
스태틱은 메모리에 먼저 올리는 것이 목적.


『부모는 자식』인데
『자식은 부모』가 되는 케이스가 있더라. 
if 문으로 그 케이스를 물을 떄 instanceof를 쓰더라.



▣MarkInterface
개발자들이 이름을 붙인거고 공식적인 이름은 아님
어떤게 MarkInterface일까? 
interface안에 아무 것도 정의 하지 않은 것을 markinterface라고 부른다.
interface Upper{	}  ▷마커 인터페이스
interface Lower{	}  ▷마커 인터페이스

이게 문법적으로 허용 됨



Upper라는 것은 Marking을 하는 것.
toUpperCase를 받으면 대문자
lower면 소문자
만약에 마킹이 안되면 그냥 

▶
interface Sea {
}

interface Ground {
}

interface Location {
	void printLive();
}

class Fish implements Location, Sea {

	@Override
	public void printLive() {
		System.out.println("바다에 삽니다.");
	}

}

class Tiger implements Location, Ground {

	@Override
	public void printLive() {
		System.out.println("육지에 삽니다.");
	}

}

public class MarkInterfaceEx {
	public static void main(String[] args) {
		Location loc1 = new Fish();
		Location loc2 = new Tiger();

		if (loc1 instanceof Sea) {
			System.out.println("바다에 삽니다.");
		} else if (loc1 instanceof Ground) {
			System.out.println("육지에 삽니다.");
		} else {
			System.out.println("외계생물입니다.");
		}

	}

}


여기에 함수를 추가해보자.(뭔소리지.. 함수 이미 있는거 아녀??)

▶
public class MarkInterfaceEx {
	☞메인이 포함된 해당 클래스에다가 함수 만들라하면
	☞ static 붙여서 만들어야함. 왜냐. static이 붙었던 함수에서 뽑아내서 다시 함수 만드는거니까
	public ★static★ void printLocation(Location loc) {
		if (loc instanceof Sea) {
			System.out.println("바다에 삽니다.");
		} else if (loc instanceof Ground) {
			System.out.println("육지에 삽니다.");
		} else {
			System.out.println("외계생물입니다.");
		}
	}

	public static void main(String[] args) {
		Location loc1 = new Fish();
		Location loc2 = new Tiger();
		
		printLocation(loc1);
		printLocation(loc2);
		
		
	}

}



===================================

추상 클래스

class 앞에 abstract가 붙는 것. 
public abstrat class House {	
	public void methodOne( ){
	  System.out.println("method one");
	}	
  }


인터페이스 아니고 일반 클래스임 ! !
abstract를 붙이면 구현 부분이 사라진다. 
즉, 구현하고 싶지 않을 떄 abstract를 붙인다.

일반적인 클래스에서는 함수를 모두 구현해야 함.
소스코드 보다 보면 일반 클래스에도 abstract가 붙은 경우가 있음
이는 자손이 구현하고 본인은 구현 부분이 없는거.
abstract가 하나라도 붙으면 문법적으로 class에도 abstract를 반드시 붙여준다.
이게 원리이다. 왜냐면 abstract가 붙으면 미완성의 의미로 해석되기 떄문이다.
미완성이라 abstract붙은건 new가 되지 않는다. (=객체생성이 안됨)
▶
abstract class A {
	// 일반적인 클래스에서는 함수를 모두 구현해야 함.
	public void one() {
		System.out.println("메소드 하나");
	}

	public abstract void two(); // 온전하지 않음. 자손이 구현해라

}

class B extends A {
	@Override
	public void two() {
		System.out.println("메소드 둘");
	}

}

public class AbstractClass {
	public static void main(String[] args) {

		B b = new B();
		b.one();
		b.two();

		
		☞polyMorphism적용해보자
		☞메모리에 올리는건 안되지만 자손을 통해서는 가능함
		A a = new B();
		a.one();
		a.two();

	}

}



===================================
===================================

챕터 18. 예외처리

프로그램상 에러 오류라고 표현되는데 
자바에서는 에러와 exception은 딱 구분되어있음

▣Exception
c언어에서는 예외처리가 없으나 OOP에서는 예외처리라는게 있다.
단순한 문법 오류가 아닌, 실행 중간에 발생하는 비정상적인 상황 의미.
▶
import java.util.Scanner;

public class Exception {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		
		int num = sc.nextInt();
		
		System.out.println( num );
		
		System.out.println("Good bye ~~~");

	}

}

//숫자를 입력하면 Good bye가 나옴
//그런데 숫자가 아니라 문자를 입력하면?
//난리부르스 됨

그 난리부르스를 누가 뿌릴까? 바로 【 jvm 】이 뿌리는 것.


c언어에서는 예외가 없어서 예전에 핸드폰도 c언어이던 시절에는
예외상황일때 리부팅이 되었다 

▣예외처리를 위한 문법: try catch
try {
   ...관찰 영역...
}
catch(ArithmeticException e) {
   ...처리 영역...
}
▶
import java.util.Scanner;

public class TryCatch {
	public static void main(String[] args) {
		   Scanner sc = new Scanner(System.in);

		
		
		try {
			System.out.println("0 나누기 전");
			
			System.out.println(1/0);
			
			System.out.println("0 나누기 후");
			
		} catch(Exception e) {
			System.out.println("에러입니다.");
			e.printStackTrace();
		}
		
		System.out.println("Good bye");

	}

}



실시간 에러가 나는건 jvm이 내는 것이다.

캐치 함수를 만든 것
} catch(Exception e) {
			System.out.println("에러입니다.");
			e.printStackTrace();
		}

문법적으로 catch는 26개 40개 써도 아무런 문제가 없습니다요


		} catch(ArithmeticException ex) {
			System.out.println("ArithmeticException 에러입니다.");
			ex.printStackTrace();
			
		} catch(Exception e) {
			System.out.println("에러입니다.");
			e.printStackTrace();
		}
		
☞ 파라미터 다르게 한 같은 함수. 즉 함수 오버로딩이다.


다형성(폴리몰피즘)
exception이 arithmeticException의 부모라서 그냥 갖다 뿌리는 것이다.

		} catch(Exception e) {
			System.out.println("에러입니다.");
			e.printStackTrace();
		}catch(ArithmeticException ex) {
			System.out.println("ArithmeticException 에러입니다.");
			ex.printStackTrace();
		}
이런식이면 에러 남.  왜냐. exception이 부모라서 컴파일에러가 자동으로 뜸.

			



===================================

◆오늘의 문제◆
/*
아래의 인터페이스에 맞추어(상속하여)
아래를 프로그래밍 하시오.

Circle, Rectangle, Triangle

interface AreaGetable{
double getArea();
}
*/

▶interface AreaGetable {
	double getArea();
}

class Circle implements AreaGetable {
	private double r;

	public Circle(double r) {
		this.r = r;
	}

	@Override
	public double getArea() {
		return r * r * Math.PI;
	}

}

class Rectangle implements AreaGetable {
	private double width, height;

	public Rectangle(double width, double height) {
		this.width = width;
		this.height = height;
	}

	@Override
	public double getArea() {
		return width * height;
	}

}

class ShapeCondOp {

	★private static double getAllArea(AreaGetable[] area) {★
		★double sum = 0;

		for (AreaGetable areaGetable : area) {★ ★ 
			sum += areaGetable.getArea();★ ★ 
			
		}

		for (int i = 0; i < area.length; i++) {★ 
			sum += area[i].getArea();★ ▶내가 오래 걸린 이유
		}

		return sum;★
	}★

	public static void main(String[] args) {

		AreaGetable[] area = { new Rectangle(4, 5), new Circle(4) };

		// AreaGetable oneArea = new Circle(4);
		System.out.println(getAllArea(area));

		// oneArea = new Rectangle(4, 5);
		// System.out.println(area.getArea());

	}

}



출력값:
140.53096491487338


▶메인클래스에 밑에 함수 하나만 더 추가
	//함수오버라이딩
	private static double getArea2(AreaGetable area) {★
		return area.getArea();★
	}
	public static void main(String[] args) {

		AreaGetable[] area = { new Rectangle(4, 5), new Circle(4) };

		// AreaGetable oneArea = new Circle(4);
		System.out.println(getAllArea(area));
		System.out.println(getArea(new Circle(10))); //314
		System.out.println(getArea(new Rectangle(4, 5))); //20

		// oneArea = new Rectangle(4, 5);
		// System.out.println(area.getArea());

	}

}

출력값:
140.53096491487338
314.1592653589793
20.0
