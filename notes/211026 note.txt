21년 10월 26일

◆어제 숙제 확인 (3D Point)◆
package Oct25_PMpractice;
//3번
/*
3차원의 점을 나타내는 Point3D 클래스를 작성하라. 
다음 main() 메소드를 포함하고 실행 결과와 같이 출력되게 하라
=======================
(1,2,3) 의 점입니다.
(1,2,4) 의 점입니다.
(10,10,3) 의 점입니다.
(100,200,300) 의 점입니다.
*/
▶public class Point3DMain {
	public static void main(String[] args) {
		Point3D p = new Point3D(1,2,3); // 1,2,3은 각각 x, y, z축의 값.
		System.out.println(p.toString()+"입니다.");
		
		p.moveUp(); // z 축으로 위쪽 이동
		System.out.println(p.toString()+"입니다.");
		
		p.moveDown(); // z 축으로 아래쪽 이동
		p.move(10, 10); // x, y 축으로 이동
		System.out.println(p.toString()+"입니다.");
		
		p.move(100,  200, 300); // x, y, z축으로 이동
		System.out.println(p.toString()+"입니다.");

	}

}

▶public class Point {

	private int x, y;

	public Point() {

	}

	public Point(int x, int y) {
		this.move(x, y);
	}

	public int getX() {
		return x;
	}

	public int getY() {
		return y;
	}

	public void move(int x, int y) {
		this.x = x;
		this.y = y;
	}

}

▶public class Point3D extends Point {
	private int z;

	public Point3D(int x, int y, int z) {
		super(x, y);
		this.z = z;

	}

	public void moveUp() {

		z++;

	}

	public void moveDown() {

		z--;

	}

	public void move(int x, int y, int z) {
		super.move(x, y);
		this.z = z;
	}

	public String toString() {

		return "(" + getX() + "," + getY() + "," + this.z + ") 의 점";

	}

}



==============================


◆수업시작◆
챕터16. 상속의 목적
:설계에 관한 프로그램


단순한 인맥 관리 프로그램: 관리 대상이 둘 ~
ex) 대학 친구 선후배 인맥 관리 해볼래

우리가 하던 방식: (이 방법 무조건 할 줄 알아야 함)
▶class UnivFriend {
	private String name, major, phone;

	public UnivFriend(String na, String ma, String ph) {
		name = na;
		major = ma;
		phone = ph;

	}

	public void showInfo() {
		System.out.println("이름: " + name);
		System.out.println("전공: " + major);
		System.out.println("전화: " + phone);
	}

}

class CompFriend {
	private String name, department, phone;

	public CompFriend(String na, String de, String ph) {
		name = na;
		department = de;
		phone = ph;

	}

	public void showInfo() {
		System.out.println("이름: " + name);
		System.out.println("부서: " + department);
		System.out.println("전화: " + phone);
	}

}

public class SocialBook {
	public static void main(String[] args) {
		// 대학 동창 관리를 위한 배열과 변수
		UnivFriend[] ufrns = new UnivFriend[5];
		int ucnt = 0;

		// 직장 동료 관리를 위한 배열과 변수
		CompFriend[] cfrns = new CompFriend[5];
		int ccnt = 0;

		// 대학 동창의 정보 저장
		ufrns[ucnt++] = new UnivFriend("LEE", "Computer", "010-333-555");
		ufrns[ucnt++] = new UnivFriend("SEO", "Electronics", "010-222-444");

		// 직장 동료의 정보 저장
		// 0번째 방
		cfrns[ccnt++] = new CompFriend("YOON", "R&D", "02-123-999");
		// 1번째 방, 후위연산이라 ccnt는 객체생성 후 배열에 집어 넣은 후 증가
		cfrns[ccnt++] = new CompFriend("PARK", "Sales", "02-321-777");

		// 모든 동창 및 동료의 정보 전체 출력
		// 0번쨰 1번째 방이라 ucnt는 2인 상황
		for (int i = 0; i < ucnt; i++) {
			ufrns[i].showInfo();
			System.out.println();
		}

		for (int i = 0; i < ccnt; i++) {
			cfrns[i].showInfo();
			System.out.println();
		}

	}

}

출력값:
이름: LEE
전공: Computer
전화: 010-333-555

이름: SEO
전공: Electronics
전화: 010-222-444

이름: YOON
부서: R&D
전화: 02-123-999

이름: PARK
부서: Sales
전화: 02-321-777


▶▶ Friend 클래스 만들고 상속 시켰어.
그러면 Univ친구와 Comp동료 공통된 부분은 Friend에 있으니 
중복해서 여러 번 안 적어도 되는 효과.


다양한 객체 타입. 그래서 '다형성'이라고 한다.

class A { }
class B extends A{}
class C extends A{}
class D extends A{}

A a  = new B(): 


설계적으로 두 개 클래스에 공통된 부분이 보인다?
그러면 묶어서 polyMorphism 사용해서 부모로 보내버려


▶package Oct26;

class Friend {

	private String name, phone;

	public Friend(String na, String ph) {
		name = na;
		phone = ph;
	}

	public void showInfo() {
		System.out.println("이름: " + name);
		System.out.println("전화: " + phone);

	}

}

class UniFriend extends Friend {
	private String major;

	public UniFriend(String na, String ma, String ph) {
		super(na, ph); ★
		major = ma;

	}

	public void showInfo() {
		super.showInfo();
		System.out.println("전공: " + major);
	}

}

class ComFriend extends Friend {
	private String department;

	public ComFriend(String na, String de, String ph) {
		super(na, ph); ★
		department = de;

	}

	public void showInfo() {
		super.showInfo();
		System.out.println("부서: " + department);
	}

}

public class SocialBookPM {
	public static void main(String[] args) {
		int cnt = 0;
		Friend[] frns = new Friend[10];

		// 모든 동창 및 동료의 정보 전체 출력
		frns[cnt++] = new UniFriend("LEE", "Computer", "010-333-555");
		frns[cnt++] = new UniFriend("SEO", "Electronics", "010-222-444");
		frns[cnt++] = new ComFriend("YOON", "R&D", "02-123-999");
		frns[cnt++] = new ComFriend("PARK", "Sales", "02-321-777");

		for (int i = 0; i < cnt; i++) {
			frns[i].showInfo(); // 오버라이딩 한 메소드가 호출된다.
			System.out.println();
		}
	}
}



==============================
1. class 명을 만든다.

2. 데이터 멤버(인스턴스 변수)를 만든다. 
private in num;
private String name; 이런거

3. 생성자를 만든다.
public 『클래스명』(데이터멤버){
}

4.데이터 멤버를 컨트롤 하는 함수를 만든다.

5.다른 소스 클래스를 그냥 대놓고 배낀다.
ctrl c + ctrl v
소스코드는 내 머릿속에서 나오는게 아니다. 외우고 익혀서 자동으로 나오는 것이다.
그리고 실무에서도 복붙 엄청 많이 한다 ㅋㅋㅋㅋㅋㅋ

==============================

▣Object 클래스와 final 선언 그리고 @Override

모든 클래스는 Object 클래스를 상속한다.
즉,
class A extends Object {  

 }

내가 넣은 적도 없는데 class A 뒤에 ' extends Object ' 가 들어감.
컴파일러가 넣어줌. 



컴파일러가 공짜로 해주는거 

1. 자동 형변환
2. 디폴트 생성자
3. 상속시 -디폴트 super 생성자
4. extends Object


object에는 모든 class를 상속받음
문법적으로 알게 모르게 사용하는 대표적인거 크게 3개
11개 함수 중 3개..

1. toString
2. equals  << boolean 관련
3. hashcode




개발자들이 가장 많이 쓰는 toString.
toString의 비밀 개봉박두
... 그 비밀은... 내가 이해를 못했다 ^^;; 머쓱타드

	A a = new A();
	System.out.println(a); //주소 출력됨
	
	public void println(Object x) {
	String s = String.valueOf(x);


오버라이딩 하세요. 
	


==============================
클래스와 메소드의 final 선언


final class ( ){ } : 클래스 앞 final >> 상속 안 된다.

final void func() { } : 함수 앞 final >> 오버라이딩 막는 것. 

==============================


에노테이션 @Override
이거 붙여주면 혹시라도 상속해야하는데 extends 깜빡하고 딴거 써서 실수하면
컴파일에러 띄워줌
그리고 다른 개발자들에게도 이거 상속받았다는거 표시해줘서 좋음




==============================
==============================

◆챕터17. 인터페이스와 추상클래스◆
class자리에 interface 
원리는 public abstract 
중괄호가 없음. 형태가 조금 다르지

▶package java_interface;

interface Printable{ 
	public abstract void print(String doc);  
}

class Printer implements Printable{
	
	@Override
	public void print(String doc) {
		System.out.println(doc);
	}

}

public class InterfaceTest {
	public static void main(String[] args) {
		Printable printable = new Printer();
		printable.print("Hello World");
		

	}

}





▶

▣interface의 특징
public 상수. 
상수도 거의 잘 안 쓰는데 문법적으로 올 수 있는 것은 public으로 선언된 상수.

중요한 것은 소위 말해서 일반 클래스에서 함수가 올 수 있는데
interface는 함수 앞에 abtract가 반. 드. 시 붙음.
즉, interface 앞에는 추상 method (추상함수)가 올 수 있고 body가 못 온다.
(1)함수 선언만 가능. (2)바디 실제 구현 부분이 없음
(3)interface에서 public abtract는 생략 가능. (4)없으면 컴파일러가 붙여준다.

abtract: 추상의

abtract  붙여 주는 이유는 함수만 선언해라. 구현된게 아님. 선언만 함.
★abstract = 자손이 구현하라. (구현은 자손이 해라)



extends 자리에 implements가 옴.
★implements는 구현하라는 걸 의미.
한마디로 interface 내용을 구현하라는 것.

class Printer implements Printable{
	
	@Override
	public void print(String doc) {
		System.out.println(doc);
	}

}


고슬링 아재가 새로운 용어를 만들어 냄
interface는 class가 아니라서 ...

인퍼페이스는 반 . 드. 시 @Override 붙음. 왜냐? 자손이 구현해야하니까
interface AAA {
	void A(String aaa);   ▶자손이 구현해라! public abstract생략됨
 }

class BBB implements AAA {
	
	@Override
	public void A(String aaa) {
		System.out.println(aaa);	
	}

 }


클래스와 유사하게 부모걸 자손이 끌어다 쓸 수 있음
부모는 함수 구현 부분이 없어서 못 올라감
자식은 new 딸려있어서 올라감


class 쓰면 될 것이지 고슬링 아재는 대체 왜?? why?? 이딴 걸 만들어낸건지 
왜그런건지 고슬링 아재에게 물어보자...(?)


interface가 나오게 된 표면적인 이유:
자바는 단일 상속이다. 
다중상속 지원을 하고 싶어서 나오게 된 것이다.



class Printer implements Printable, Printable2{
	
	@Override
	public void print(String doc) {
		System.out.println(doc);
	}

}

이런 식으로 다중상속 문법적 허용이 된다.

객체생성은 일반클래스와 마찬가지로 부모타입 받아낼수잇다
like 폴리몰피즘
활용이 엄청 다양함

인터페이스는 무조건 오버라이딩 되어야함. 자식에서 구현되어야함


상속과 구현
인터페이스는 다중으로 받아낼수 있고
상속은 반드시 하나 

A extends B implements C, D 

==============================

▣인터페이스의 본질적 의미


	↗ 삼성프린터
윈도우 os 
	↘ LG 프린터



MS에서 제공하는 인터페이스 
interface Printable {
 	public void print (String doc);
 }

삼성프린터
class SPrinterDriver implements Printable {
	@Override
	public void print (String doc) { 
	 }
 }

LG프린터
class LPrinterDriver implements Printable {
 	@Override
	public void print (String doc) {
	 } 
 }

누군가가(갑님께서)  표준 규약 강제 이것 밖에 없음
그럼 위에 것을 어떻게 소스로 표현?





interface해서 MS OS가 강제함.
Print 제작사들은 저 안에서 돌아가도록 짜는 것.  
겉 껍데기 print는 맞춰줘야 해. 규약, 표준이라고 함
사용방법은 polyMorphism적용. 함수오버라이딩 활용하기 위해서 
▶interface Printable {
	public void print(String doc);
}

class SPrinterDriver implements Printable {
	@Override
	public void print(String doc) {
		System.out.println("From Samsung printer");
		System.out.println(doc);
	}

}

class LPrinterDriver implements Printable {
	@Override
	public void print(String doc) {
		System.out.println("From LG printer");
		System.out.println(doc);
	}

}

public class PrintInterface {
	public static void main(String[] args) {

		String myDoc = "This is a report about...";

		// 삼성 프린터로 출력
		Printable prn = new SPrinterDriver();
		prn.print(myDoc); ★

		System.out.println();

		// 삼성 프린터로 출력
		prn = new LPrinterDriver();
		prn.print(myDoc); ★

	}

}


프린트기를 사왔어.
근데 바로 작동은 안하고 컴터에 드라이브를 설치해야 함.
대체 왜 설치해야 할까? 그리고 설치하면 뭐가 작동 되는 걸까?

드라이브를 설치하면 어떤 하드드라이브가 구동된다.

삼성프린터에대한 소스코드는 삼성 개발자, 제조업자들만 알어 
얘네가 SPrinterDriver를 던져줄 수 있게 드라이버 설치를 하라는거다.

자바로 치면 .class를 받아온다는 의미다.





==============================

◆오늘의 문제◆

Object obj = new Circle (10);
System.out.println(obj);

//출력: 314.1592653589793입니다.



//오후 문제 풀이였는데 결국 해결못함 ㅠㅠ ..밑에는 쌤 풀이
▶class Circle {

	private int r;

	public Circle(int r) {
		this.r = r;
	}

	@Override
	public String toString() {

		return (r * r * Math.PI) + "입니다.";
	}

}

public class ObjectCircle {
	public static void main(String[] args) {
		Object obj = new Circle(10);
		System.out.println(obj);

	}

}

==============================

◆오늘의 진짜 문제◆ - interface

아래의 인터페이스에 맞추어(상속하여) 아래를 프로그래밍 하시오


Circle, Rectangle , Triangle


interface AreaGetable{
double getArea();
}


main(){

AreaGetable area = new Circle(4);
sysout(area.getArea())

area = new Rectangle(4,5);
sysout(area.getArea())

area = new Triangle(4,5);
sysout(area.getArea())
}

▶
package Oct26;

interface AreaGetable {
	double getArea();
}

class Circle2 implements AreaGetable {

	int r;

	public Circle2(int r) {
		this.r = r;
	}

	@Override
	public double getArea() {
		return r * r * Math.PI;

	}

}

class Rectangle2 implements AreaGetable {
	int width, height;

	public Rectangle2(int width, int height) {
		this.width = width;
		this.height = height;
	}

	@Override
	public double getArea() {
		return width * height;

	}

}

class Triangle2 implements AreaGetable {
	int width, height;

	public Triangle2(int width, int height) {
		this.width = width;
		this.height = height;
	}

	@Override
	public double getArea() {
		return width * height * 0.5;

	}

}

public class ShapeInterface {
	public static void main(String[] args) {
		AreaGetable area = new Circle2(4);
		System.out.println(area.getArea());

		area = new Rectangle2(4, 5);
		System.out.println(area.getArea());

		area = new Triangle2(4, 5);
		System.out.println(area.getArea());

	}
}

출력값:
50.26548245743669
20.0
10.0











//클래스가 잘 생각나지 않을 경우
1. class 를 만든다.
2. 데이터 멤버(인스턴스 변수)를 반드시 만든다.
3. 생성자(클래스 이름과 동일)를 만든다.
4. 데이터 멤버(인스턴스 변수)를 컨트롤하는 함수를 만든다.
5. 생각이 나지 않을 경우, 다른 class 있는 내용을 복붙한다.


주의할 것(실수 no no !!)
1. 클래스 안에 클래스가 들어가지 않도록 한다.
ex) class A{
	class B{ }
}

2. 되도록이면 메인을 가진 class는 따로 파일을 만들고 시작.










