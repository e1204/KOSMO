♣10월 8일 금요일♣

복습) 값을 반환하는 메소드 return 타입


리턴타입이 있을 경우: 특정한 값으로 반환할 수 있는 경우(1부터 100까지의 합)(두수의 합) 등등..
void: 특정한 값으로 리턴 불가 예) 구구단 찍기, 별찎기

리턴 타입 함수명(파라미터{
	return 값;
}

int add(int num1, int num2){
	return num1 + num2;;
}
void add(int num1, int num2){
	return num1 + num2;;
}


◐return의 두가지 의미
☞보통 return하면 값이 있는데, 함수 중간에 return을 찍어버리면
(1)함수 값을 도출하겠다 (2)그 후에 나오는 함수값을 실행하지 않겠다 라는 의미가 있다. 

▶public class Return {

	public static void main(String[] args) {
		
		int i = 0;
		System.out.println(0);
		
		{
			
			int num = 0;
			System.out.println(num); 
			System.out.println(i); 
 			
		}
		
		
		//System.out.println(num); 
			

		
	}

}
출력값
0
0
0




여기서 return을 안 쓰면 Exception in thread "main" java.lang.ArithmeticException: / by zero 이런 오류가 뜸.
수학적 오류라는 뜻임. 0이 분모로 가는건 수학적 오류(?)라서.



◐Scope 변수(영역)
☞지역변수? (local영역)함수 안에 선언 된 모든 변수들 (암기! ! !)
☞지역변수 선언의 예 
해당 변수의 스코프는 중괄호이다. {  } 
변수명이 중복되면 에러가 난다.

int i =1;
for (int i =0; i<10; i++){ }  
이렇게 하면 에러가 뜸. 왜냐면 메모리에 이미 int i가 있는데 for문에서 또 i가 나와서 중복 됨.

for (int i =0; i<10; i++){ } 
for (int i =0; i<10; i++){ } 
이렇게 하면 에러가 안 뜸. 왜냐면 두 int i의 범위는 중괄호기 때문.

(예)
▶public class Scope {
	public static void main(String[] args) {
		
		//메소드를 호출한 영역으로 값을 반환
		
		divide(4, 2);
		divide(6, 2);
		divide(9, 0);	

	}
	
	public static void divide(int num1, int num2) {
		
		if(num2 == 0) {
			
			System.out.println("0으로 나눌 수 없습니다.");
			return;   //값의 반환 없이 메소드만 종료
			
		}
		
		System.out.println("나눗셈 결과: " + (num1 / num2));
		
	}

}
출력값
나눗셈 결과: 2
나눗셈 결과: 3
0으로 나눌 수 없습니다.


◐메소드의 재귀 호출 
안 써도 문제 해결 가능. 왜냐면 지원하는 것이 있고 아닌 것이 있음. 
알고리즘 코딩 시험에는 나옴. 실무에서는 그닥..

재귀 호출의 대표:  ! (팩토리얼)

f(n)=1
1! = 1

f(n) = n * f(n-1) 
2! = 2 * 1!
3! = 3 * 2!
4! = 4 * 3!
5! = 5 * 4!

이거를 프로그램 언어로 어떻게 옮길까?
▶	public static int factorial(int n) {
		if( n == 1 )
			return 1;   		//n이 1일떈 자기 자신 호출. 
		
		else
			return n * factorial(n-1); 	//자기 자신의 함수에서 자기 자신의 함수 호출
		

	}




☞팩토리얼 구현의 예
▶public class ReculFactorial {

	public static void main(String[] args) {

		System.out.println("3 factorial: " + factorial(3));
		System.out.println("12 factorial: " + factorial(12));

	}

	public static int factorial(int n) {
		if (n == 1)
			return 1;

		else
			return n * factorial(n - 1); //팩토리얼도 메소드 형태라서 재귀호출이 가능해짐.

	}

}

출력값
3 factorial: 6
12 factorial: 479001600


◐클래스와 인스턴스(객체) (모든 언어 통틀어서 객체지향적인
☞Instance (★하단 프로그램 암기 ! ! !)
▶class Circle{
	//인스턴스 변수 선언
	int radius;  //함수 밖, 클래스 안에 변수 선언 함 
		
	public void setRadius(int r) {
		radius = r; //raidus에 값을 집어 넣고
	}
	
	public int getRadius() {
		return radius;  //radius값을 내겠다. 클래스 안에 있는 반지름 값을 가져오겠다.
	}		
	
	public double getArea() {
		return radius * radius * Math.PI;
	}	
}

 public class InstanceTest {

	public static void main(String[] args) {
		Circle circle = new Circle();
		
		circle.setRadius(5);
		
		int radius = circle.getRadius(); //뒤에 ( )함수 표시 있으니까 함수 호출
		
		System.out.println(radius);
		System.out.println(circle.getRadius());
		
		double area = circle.getArea();
		
		System.out.println(area);		
	}
}

출력값
5
5
78.53981633974483




☞객체생성
▶class A {
	int num = 155;

	public void printNum( ) {
		System.out.println(num);
	}
}

class B {
	int sum = 100; // 인스턴스 변수 (클라스 안, 함수 밖

	public void printSum( ) { // 함수 안에 있는 변수를 지역변수
		System.out.println(sum);
	}
}

class Rectangle {
	int width;
	int height;
		
	//setter함수 세터함수: 자기자신 변수에 세팅하는거
	public void setWidth(int w) { // 여기서 public 딱히 필요없지만 관습적으로 넣어줌
		width = w; // set어쩌고 할 떄는 void하고 int = 파라미터
	}
	//getter함수 게터함수: 
	public int getWidth() { // get어쩌고 할 때는 값 넘기는게 아니라서 괄호안에 함수 안 넣음.
		return width; // void가 아니니까 return하고, get어쩌고는 자기자신 불러오는거라 자기자신 넣음
	}
	
	public int getArea() {
		return width * height;		
	}
}

 public class InstanceTest2 {

	public static void main(String[] args) {
		A a; // int abc; 데이터 타입에 변수 설정하면 그게 변수 선언
		a = new A(); // 또는 처음부터 A a=new A();라고 해도 됨.

		a.printNum();

		B b = new B();

		b.printSum(); // 100

		Rectangle rec = new Rectangle(); // 위에 Rectangle 클래스 이름만 달아줘도 compile
		rec.width = 10;
		rec.height = 10; // 함수는 아니니까 멤버변수(?)
		rec.setWidth(20); // 함수 만들때는 public + return타입+함수명+파라미터 가 반드시 온다

		System.out.println(rec.width); // 20
		System.out.println(rec.getWidth()); // 20
		
		System.out.println(rec.getArea()); //200
	}
}

출력값
155
100
20
20
200


//우클릭 > source > generate getter setter


		


◐인스턴스
☞클래스 = 데이터 + 기능
클래스 안에는 변수와 메소드 2개로 구성되어 있다.

☞인스턴스 변수
:클래스 내에 선언된 변수

☞인스턴스 메소드
:클래스 내에 정의된 메소드

☞실제 면접 단골 예시
1) 클래스가 뭡니까 ? ㅇㅅㅇ
2) 클래스와 객체의 차이가 뭡니까 ?? ㅇㅅㅇ

해당 클라스를 붕어빵 틀이라 하고 class BankAccount{  } 
new어쩌고 객체를 붕어빵이라고 함 new BankAccount (  );

 


public static void main(String[] args) {
main이라는 애를 jvm이 호출한다. 그러면 위에서 부터 밑으로 실행함.


◐'참조형' Reference Type. 마지막 9번째 클래스타입
class A {

}
public class InstanceTest2 {
	public static void main(String[] args) {
		A a;   <= 변수선언. A가 참조형 데이터 타입. int num;과 별반 다를거 없음.
참조형 데이터 타입은 class명이다.
즉, 우리가 배운 8가지 이외의 데이터 타입이 나오면 참조형이다.



모든  프로그램의 완성은 뭐다? 메모리다. 

int num;의 방을 잡아줄 땐
int가 num이라는 이름으로 4바이트 잡아준다. 
그리고 int가 담고있는 두 가지 의미는 (1)4바이트 크기와 (2)정수를 담는다는 것.

그렇다면
A a;는 방을 어떻게 잡아줄까?

일단 a라는 변수명으로 데이타 타입을 잡아준다. 

데이터 타입이 A에요. 
A a;라고 선언하게 되면



A >   > a
모든 참조형은 4 byte 잡는다. WHY? 왜? 
4바이트 is the 32비트


new라는 키워드가 오늘의 핵심
a = new A( );
도대체 여기에 뭐가 들어가는데 
new를 하게 되면 A하고 괄호를 친다. 괄호가 뭔데? 함수

함수가 없는데 함수를 적어준건 뭔소리여 
컴파일러가 실질적으로 저 함수를 넣어준다는 말.
A를 생성자라고 함. class 이름과 똑같은 함수./ 언제? 개발자가 안 넣어주게 되면  
class A {
A( ){ }
}

메모리에 올리라고 명령하는 것


모든 프로그램은 메모리에 올라가야 실행이 된다.
마찬가지로 
A a;라는 10101010덩어리를 당연히 메모리에 올려야지 
a.printNum();같이 함수 호출이 가넝하다.
new A();는 뭐다? A라는 class를 cpu가 알아듣는 010101 덩어리로 올려라~

그럼 내가 어떻게 올리는가? 


printNum

a = new A( ); 이때 뭐 들어갈까용
뭔가 대입하고 넣고 그러는데 바로 '메모리 주소'가 들어간다.
객체생성될때 해당 첫번쨰 번지가 들어가용
 
  


a. num = 10 이란 a가 2000 번지 찾아가서 10을 실행 시키라는 말
즉 a ->num=10과 같은 의미.





클래스 B를 예로 들어봅시다.
class B {
	int sum = 100; 
	public void printSum() 
		System.out.println(sum);
	}
}
public class InstanceTest{
	public static void main(String[] args) {
		B b = new B();
		b.printSum(); 


>>
B객체 생성합시다:  B b = new B ( );  이것이 객체 생성
이 객체 생성한 내용을 메모리로 그릴 줄 알면
이것이 바로 프로그래머로써의 첫걸음이자 완성이다.
왜냐. 프로그램을 완벽히 이해하고 있다는 뜻이기 때문.
b.printSum( );





get 함수(getter)는 read 메모리에 무슨 값이 저장되어 있는지 확인 (값이 뭔지 모를떄)
set 함수(setter)는 write 메모리에 값을 저장(값을 변경하고 싶을떄)		




class Rectangle {
	int width =10;
	int height =10;
		
	public int getWidth() { 
		return width; 
	}
	public void setWidth(int width) {  
		this.width = width;
	}
	
	public int getArea() {
		return width * height;
		
	}

}


public class InstanceTest2 {

	public static void main(String[] args) {
	
		Rectangle rectangle = new Rectangle();
		System.out.println(rectangle.getArea()); 
		rectangle.setWidth(20);

sysout(rectangle.getArea());

if(rectangle.getWidth() == 20) {
sysout("지금 가로는 20입니다"){
}

	}

}
















