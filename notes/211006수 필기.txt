♣10월 6일 수요일♣

복습) 

◐형변환 대원칙
int + long

연산시 두 타입 다르면 반드시 한 쪽 타입으로 변환.
(64bit long + 32bit int > int형을 64비트 long 형으로 바꿈)
값을 보존하는 쪽으로. 소숫점을 보존하는 쪽으로 변함.
byte ▷ short / char ▷ int ▷ long ▷ float ▷ double
(int이하에서는 무조건 int로 형변환)


◐sce

☞public class SCE {

	public static void main(String[] args) {
		int num1 = 10;
		int num2 = 10;
		boolean result; //boolean result = false;
		
		result = false && true;
		
		result = ((num1 += 10) < 0  && (num2 += 10) > 0);
		System.out.println("result = " + result);
		System.out.println("num1 = "+num1);
		System.out.println("num2 = " +num2 + '\n');
		
		result = true && true;
		result = ((num1 +=10) >0 || (num2 += 10)>0);
		System.out.println("result = " + result);
		System.out.println("num1 = "+num1);
		System.out.println("num2 = "+num2);
		
//or연산 같은 경우 하나라도 true면 true로 연산됨. 그런데 앞에 데이터가 이미 true면 뒤에 데이터 계산 안해버림 ㅋㅋ
		



◐부호 연산자
☞public class SCE2 {
	public static void main(String[] args) {
		
		double e1 = 3.5;
		double e2 = -3.5; /* e2에 저장되는 값은 -3.5 >> -1*3.5 =  -1*e1 >> 이 말인즉, 내부적으로 진짜 연산을 하는 것 */
		
		System.out.println(e2);

부호 연산자 - 는 변수에 저장된 값의 부호를 바꾸어 반환된다.


☞public class UnaryAddMin {
	public static void main(String[] args) {
		short num1 =5;
		System.out.println(+num1); //결과적으로 불필요한 + 연산
		System.out.println(-num1); //부호를 바꿔서 얻은 결과를 출력
		
		short num2 = 7;
		short num3 = (short)(+num2); // 형 변환 하지 않으면 오류 발생 ★
		short num4 = (short)(-num2);  //형 변환 하지 않으면 오류 발생 ★
		System.out.println(num3);
		System.out.println(num4);



5앞에 +를 붙여서 +5를 만들면 결과적으로 5가 산출되지만 컴퓨터 내부적으로는 1*5=5라는 연산을 한다.
short num3 =(+num2); 이러면 오류가 발생하고 short num3 = (short)(+num2);  이러면 오류가 발생하지 않는다.
short num3 =(+num2)여기서 num2앞에 +를 붙이지 않았다면 ..

		short num1 =10;
		short num3 = +num5; //고작 +붙였다고 에러가 남. // 1*int
		int
		short num6 = (short)(+num5);
		


◐증가 감소 연산자(++, --): 전위 연산자 & 후위 연산자 
+와 ++는 완전히 다른 것으로 이해해야 한다. 따로 알아 둘 것! 
▶prefix 전위 연산자
++ : 1을 하나 증가 시킨 다음에 원래 있던 값에 대입을 한다. 즉, 피연산자에 저장된 값을 1 증가. 
--
☞public class PrefixOp {
	public static void main(String[] args) {
		int num = 7;
		System.out.println(++num); //num값 하나 증가 후 출력
		System.out.println(++num); //num값 하나 증가 후 출력
		System.out.println(num);
결과값:   8		
	9
	9
==================================================================

▶profix 후위 연산자
++
--
☞public class PostfixOp {
	public static void main(String[] args) {
		int num=5;
		System.out.print((num++) +""); //출력 후 값 증가. (num)찍힌 뒤에 ++ 연산 됨. 그래서 그 다음번에 (num)찍으라 하면 그제서야 연산된 결과값이 보임. 
		System.out.print((num++) +""); //출력 후 값 증가
		System.out.print(num + "\n");
		
		System.out.print((num--) +""); //출력 후 값 감소
		System.out.print((num--) +""); //출력 후 값 감소
		System.out.print(num);
//print와 println 다름. print는 횡으로 찍히고 println은 열로 찍힘. 
결과값:   567
	765
        (765 아래 한 칸 띄움 ) 
==================================================================


★★★전위 연산자와 후위 연산자 차이 ★★★
☞public class PostfixOp {
	public static void main(String[] args) {
	//전위 연산자
		int num1 = 2;  //num = num +1 을 먼저 연산 후 출력
		System.out.println(++num1);
		System.out.println(num1);
		System.out.println("=========");
	// 후위연산자
☞		int num = 2; // 출력 후 num = num+1 연산
		System.out.println(num++);
		//System.out.println(num)출력 후 num= num+1 여기에서 연산 진행;
		System.out.println(num);
	
결과값:   3
	3
	=========
	2
	3
==================================================================



◐비트 연산 (=이진수 연산)
자바에서는 비트 연산을 잘 안 시킴. C언어에서 비트 연산이 나옴. 그래도 의미는 알아야 하니 알아 둘 것.

비트연산자: & (and 연산이라고 불리지만 &&와 다름)
cf) &&는 true 냐 false냐 . (and 연산이라고 불리지만 &와 다름)

&연산은 비트 단위로 and 연산을 한다. 
예) n1 & n2;
둘 중 하나라도 false면 무조건 false 

byte n1 = 13;
byte n2 = 7;
byte n3 = (byte)(n1&n2);
sysout(n3);

각각의 비트를 대상으로 연산을 진행, 그리고 각 비트를 대상으로 진행된 연산 결과를 묶어서 하나의 연산 결과 반환

n1 : 0 0 0 0 1 1 0 1
n2 : 0 0 0 0 0 1 0 1
n3 : 0 0 0 0 0 1 0 1 (두 개 모두가 1일 때만 1 ! 나머지는 0으로 연산 됨)


▶비트 연산자 네 개
1) & : and (비트 A & 비트 B)
	1 1 = 1
	1 0 = 0
	0 1 = 0	
	0 0 = 0

2) | : or (비트 A | 비트 B)
	1 1 = 1
	1 0 = 1
	0 1 = 1
	0 0 = 0

3) ^ : xor (비트 A ^ 비트 B) (현장에서는 삿갓이라고 부름)
두 비트가 다르면 1. 같으면 0
	1 1 = 0
	1 0 = 1
	0 1 = 1
	0 0 = 0

4) ~ :모든 비트를 반전시켜 얻은 결과 (~비트)
	1 = 0
	0 = 1


☞public class BitOperator {
	public static void main(String[] args) {

		byte n1 = 5; //00000101
		byte n2 = 3; //00000011
		byte n3 =-1; //11111111
		
		byte r1 = (byte)(n1&n2); //00000001
		byte r2 = (byte)(n1|n2);  //00000111
		byte r3 = (byte)(n1^n2); //00000110
		byte r4 = (byte)(~n3);   //00000000
		
		System.out.println(r1); //00000001은 1
		System.out.println(r2); //00000111은 7
		System.out.println(r3); //00000110은 6
		System.out.println(r4); //00000000은 0




◐비트 쉬프트 연산

num =2;
sysout ( num << 9)
결과값: 1024 (2^9)

넘버 값에 화살표 뾰족방향으로 비트를 밀어내는 것.
shift 연산자는 옮기는 것을 의미.
<< 이거는 왼쪽으로 미는 것. 근데 왼쪽으로 밀면서 n배 증가
>> 이거는 오른쪽으로 미는 것. 오른쪽으로 밀면서 n으로 나눈 결과.

☞public class BitShiftOp {
	public static void main(String[] args) {

		byte num;
	
		num=2; //00000010
		System.out.print((byte)(num<<1) + ""); //00000100
		System.out.print((byte)(num<<2) + ""); //00001000
		System.out.print((byte)(num<<3) + "" + '\n'); //00010000
		
		num=8; //00001000
		System.out.print((byte)(num>>1) + ""); //00000100
		System.out.print((byte)(num>>2) + ""); //00000100
		System.out.print((byte)(num>>3) + "" + '\n'); //00000001
		
		num=-8; //11111000
		System.out.print((byte)(num>>1) + ""); //11111100
		System.out.print((byte)(num>>2) + ""); //11111110
		System.out.print((byte)(num>>3) + "" + '\n'); //11111111

결과값:   4816
	421
	-4-2-1	
==================================================================		
/* 왼쪽으로의 쉬프트는 num 값의 부등호 우측 값만큼 증가,
 * 오른쪽으로의 쉬프트는 num 값의 부등호 우측 만큼 나눈 결과  */		




▣Ch.5 실행 흐름의 컨트롤
◐if 그리고 else
소위 말하는 조건 절.


▶if문: 만약 ~ 라면
if(true or false) {
	조건 true시 실행되는 영역
}◀

ex1) if(n1<n2) {                     //이게 조건 절.
	System.out.println("n1 > n2 is true"); //이건 실행 구문. 중괄호 안 코딩 부분이 true이면 실행되고 false면 실행안되고 그 다음 줄 실행
       }

ex2) if(n2<n2)                    //if문에 속한 문장이 하나일 경우 중괄호 생략 가능
	System.out.println("n1 > n2 is true");


▶if~else문
if(true or false) {
	조건 true시 실행되는 영역
}else {
	조건 false시 실행되는 영역
}◀

☞public class IEBasic {
	public static void main(String[] args) {

		int n1 = 5;
		int n2 =7;
		
	//if문
		if(n1 < n2) {
			System.out.println("n1 > n2 is true");
		}
결과값: n1 < n2 is true
		
	//if ~ else문
☞		if(n1 == n2) {
			System.out.println("n1 == n2 is true");
		}
		else {
			System.out.println("n1 == n2 is false");
		}
	
결과값: n1 == n2 is false	
==================================================================		

▶if~else if~else문
if(true or false) {
	조건 true시 실행되는 영역
}else {
	조건 false시 실행되는 영역
}◀

else if 절, 중간에 얼마든지 추가 가능

if(...)
  Sysout("...");
else if(...)
  Sysout("...");
else if(...)
  Sysout("...");
else(...)
  Sysout("...");

만약에 if가 true면 else if와 else 안 봄. 만약 if가 false고 else if가 true면 else if만 실행시키고 지나감.
else가 실행되려면 앞에 애들이 다 false여야 진행 됨. 문법적으로 else if는 50개든 100개든 추가할 수 있다. 
==================================================================
☞public class IEBasic {
	public static void main(String[] args) {
		int num =120;
		if(num < 0) {
			System.out.println("0미만");
		}
		else if(num <100) {
			System.out.println("0 이상 100 미만");
			
		}
		else {
			System.out.println("100이상");
		}

결과값: 100이상

만약 int num = 50; 이면 "0 이상 100 미만" 값이 나온다.
==================================================================



☞public class IEPractice {
	public static void main(String[] args) {

	/*1번. 국어 50 영어 60 수학 90
	 * 총점 평균
	 * 평균 90이상이면 수
	 * 평균이 80 ~90 80이상 90미만이면 우
	 * 평균이 70~80 70이상 80미만이면 미
	 * 70점 미만 가*/
		
		int kor=50, eng=60, math=90;
		int total = kor + eng + math;
		double avg = ((double)total/3);
		System.out.println(avg);

		if(avg>=90) {
			System.out.println("수");
		}
		else if(avg >= 80) {   //else if 쓰면서 (70<avg<80)이런식으로 부호 두 개 쓰니까 오류뜸
			System.out.println("우");
		}
		else if(avg >= 70) {
			System.out.println("미");
		}
		else{
			System.out.println("가");  //else는 괄호 없음
		}

결과값:    66.66666666666667
	가

(70<avg<80)이것을 표현하려면 반드시 ((avg<80) && (70<avg)) 이런식으로 AND연산을 사용하여 풀어준다.
==================================================================

	/*if else는 문법적으로 if문 안에 else를 계속 품을 수 있다.*/
☞		int num=10;
		if(num<0) {
			System.out.println("0보다 작다");
		}else {
			if(num<100) {
				System.out.println("100보다 작다");
			}else {
				System.out.println("100보다 크다");
			}
		}
		System.out.println("==========");

	/*위에 것을 간단(?)하게 만든 것 */
☞		int num2=10;
		if(num2<0) {
			System.out.println("0보다 작다");
		}else if(num2<100) {
				System.out.println("100보다 작다");
			}else {
				System.out.println("100보다 크다");
			}


◐삼항 연산자 ( if ? : )
조건이 나오고 물음표가 나오고 떙땡이 나옴
     조건 ?           수1 :         수2
(true or false) 
물음표 앞에 조건절이 옴. if와 같음. 그러니 true false가 됨
만약 true면 num2값이 나오고 false면 num3값이 넘어 옴
☞    public class ThreewayOperators {
	public static void main(String[] args) {

		int num1;
		int num2 = 100;
		int num3 = 10;
		
		num1 = (num2>num3) ? num2 : num3 ;  // 이게 문법임 ㅋㅋ
			//   항1          항2     항3
		System.out.println(num1);
		
		num1 = (num2<num3) ? num2 : num3 ;
		System.out.println(num1);

		num1 = (num2>num3) ? (num2-num3) : (num3-num2) ;
		System.out.println(num1);
		
	
		num1 = (num2<num3) ? (num2-num3) : (num3-num2) ;
		System.out.println(num1);

결과값:   100
	10
	90
	-90
==================================================================



◐Switch와 break
sw누르고 ctrl space하면 뭐가 주르륵 뜸. > 그때 break있는걸로 선택 > case부터 하단까지 tab 해서 들여쓰기. 
switch가 나오면 정수.

		switch (n) {
			case 1:
				
				break;
			case 2:
				
				break;
			case 3:
				
				break;
	
			default:
				break;
		}


▶break없이 swtich만 있는 예시	
☞public class Switch {
	public static void main(String[] args) {
		
		int n = 3;
		switch (n) {
			case 1:
				System.out.println("Simple Java");
			case 2:
				System.out.println("Funny Java");
			case 3:
				System.out.println("Fantastic Java");
			default:
				System.out.println("The best programming language");
		}
		
			System.out.println("Do you like Java?");
	}
}

결과값:   Fantastic Java
	The best programming language
	Do you like Java?
==================================================================

▶switch문 + break문
break문이 실행되면 switch문을 빠져나간다.
break means 중단, 중지. 
//걸어서 하늘까지..
//걸리면 break까지..		

☞public class Switch {
	public static void main(String[] args) {
		
		int n = 3;
		switch (n) {
			case 1:
				System.out.println("Simple Java");
				break;
			case 2:
				System.out.println("Funny Java");
				break;
			case 3:
				System.out.println("Fantastic Java");
				break;
			default:
				System.out.println("The best programming language");
		}
		
			System.out.println("Do you like Java?");
	}
}

결과값:   Fantastic Java
	Do you like Java?
==================================================================

☞public class Switch {
	public static void main(String[] args) {
		
		int n = 1;
		switch (n) {
			case 1:
				System.out.println("Simple Java");
				
			case 2:
				System.out.println("Funny Java");
				
			case 3:
				System.out.println("Fantastic Java");
				break;
			default:
				System.out.println("The best programming language");
		}
		
			System.out.println("Do you like Java?");
	}
}

결과값:   Simple Java
	Funny Java
	Fantastic Java
	Do you like Java?
==================================================================

☞		int n = 2;
		switch (n) {
			case 1:
				System.out.println("Simple Java");
				
			case 2:
				System.out.println("Funny Java");
				
			case 3:
				System.out.println("Fantastic Java");
				break;
			default:
				System.out.println("The best programming language");
		}
		
			System.out.println("Do you like Java?");
	}
}

결과값:   Funny Java
	Fantastic Java
	Do you like Java?
==================================================================
































	
