♣10월 5일 화요일♣

32비트 시스템의 메모리양은 8기가. 더 달아도 쓸모가 없습니다.


1번
이클립스로 java_area 프로젝트를 만들고, 아래의 조건으로 프로그램하시오.
CircleArea.java 파일을 만들고 원의 반지름 5.6 을 담는 변수 선언. PI 상수로 선언. 
원의 넓이 공식 파이알의제곱을 담는 변수 선언 하여 넓이를 담고 출력.
☞public class CircleArea {
	public static void main(String[] args) {
		double r;
		final double PI = 3.14;

		r = 5.6;
		double area = r * r * PI;

		System.out.println(area);

98.4704


2번
이클립스로 java_area 프로젝트를 만들고, 아래의 조건으로 프로그램하시오.
RecArea.java 파일을 만들고 가로와 세로를 담는 변수 선언. 
해당 변수에 임의 가로,세로값 할당. 넓이를 담는 변수 선언. 해당 넓이 출력.
☞public class RecArea {
	public static void main(String[] args) {
		double width, length, area; //int도 가능

		width = 4;
		length = 5;

		area = width * length;

		System.out.println(area);





☞리터럴(Lirterals)에 대한 이해
Literal은 정수형 상수.
int num1 = 5 + 7; 5 7 이 자체를 상수로 보고 리터럴이라 한다. 변경 못 한다.

☞long형 상수(리터럴)의 표현 방법
◆sysout(3147483647 + 3147483648);
컴파일시 Integer number too large라는 오류 메시지를 전달한다.
int num하게 되면 4byte, 21억을 올려달라고 compile하는 것.
31억도 컴파일러가 메모리에 올려야하는데 데이터 타입을 안 정해 준 상태. 메모리에 올릴 땐 반.드.시. 타입(8가지 중에..)을 정해야 한다. 인간 컴파일러가 되어야 한다. 
안 정해주면 저 31억이 21억을 넘는다는 것을 절대 모름. 법칙은 데이터타입을 정하지 않은 상태로 리터럴을 올릴때, 정수만 보이면 무조건 디폴트로 4byte로 올려버린다. 왜냐하면 jvm(cpu선이 2개로 설계되어서)이 32비트라서, 정수만 보이면 cpu에 가장 빠르게 처리 가능한 int로 처리해버림. 그러니 21억이상이 넘어가버리면 야~ 이거 21억 아니다! 하고 오류를 띄워버림. 
그래서 뒤에 L을 붙여서 이건 long이다~ 하고 알려줌

◆sysout(3147483647L + 3147483648L);
l 또는 L을 붙여서 long형 상수로 표현해 달라는 요청을 해야 한다.



☞정수형 상수의 이진수 표현방법과 언더바 삽입
byte seven = 0B111;
int num205 = 0B11001101;
0B또는 0b를 붙여서 이진수 표현

int num = 100_000_000;
int num = 12_32_56_78_90;
원하는 위치에 언더바 삽입 가능 (c언어에서는 언더바 불가했는데 고슬링 아저씨가 자바에서는 가능하게 해줌)


☞실수형 상수(리터럴)
sysout(3.0004999+2.0004999);
sysout(3.0004999D+2.0004999D);
실수는 기본 double형 double형임을 명시하기 위해 d또는 D삽입 가능



☞실수형 상수의 e 표기법
3.4e3 > 3.4*10^3=3400.0

3.4e-3 > 3.4*10^-3=0.0034
e가 뭐다? 10이다.

double d = 3.4e3;
sysout(e)
3400

왜 승수가 아니라 e로 적는 걸까? 

☞부울형 상수
boolean bool = true;
sysout(bool);

true

char ch = 'A';
sysout(ch+"A");


☞이스케이프 시퀀스escape sequences ( \ )
반드시 백슬러시가 있고 문자가 나옴
 class EscapeSequences {
	public static void main(String[] args) {

		System.out.println("AB" + '\b' + 'C'); 
AC		//한 칸 빽해라. 그래서 A다음에 B가 아니라 C가 나옴. C가 B자리로 한  칸 빽함


		System.out.println("AB" + '\t' + 'C'); 
AB	C	//그 유명한 Tab(탭)키. 이 기능을 자바에서는 \t 이렇게 쓸 수 있다.


		System.out.println("AB" + '\n' + 'C');
AB		//그 유명한 New(뉴). 재생. 뉴라인 재생. 그래서 다음 줄에 C입력. 개행. 행을 연다. 우리 식으로 하면 ENTER키와 같음.
C		


		System.out.println("AB" + '\r' + 'C'); 
CB		//리턴. C가 제일 처음으로 가버리면서 맨 앞 A를 덮어써버림. 이건 거의 안씀. 




//HELLO
		char ch = 65;
		System.out.println(ch + "\'Hello\'");
A'Hello'





★형 변환 Casting ★★★ (상당히 중요)
무조건 암기 무조건 외워 무저건 반드시 !!! 

☞자료형 변환의 의미와 필요한 이유?
int num1 = 50;
long num2 = 3147483647L; //L자 안 붙이면 에러 남
Sysout(num1 + num2); //num1에 저장된 값이 long 형으로 자동 형 변환 된다.
1) 두 피연산자의 자료형이 일치해야 동일한 방법을 적용하여 연산을 진행할 수 있다. ★★★
2) 피연산자의 자료형이 일치하지 않을 때 형(type)의 변환을 통해 일치 시켜야 한다. ★★★

눈에 안보이는 것을 이해해야 에러가 안남
		int num1 = 100;
		long num2 = 3100000000L;
	//컴퓨터는 무식해서 반드시 연산시 두 개의 형을 일치시킨다.
		long result = num1 + num2;  
	//num1은 int고 num2는  long이라 일치가 안되는 중
		System.out.println(result);

	//그럼 언제 형 변환이 일어나는가? 연산시 두 개의 타입이 다를 경우!

64비트를 int형으로 바꾼다는 것은 앞에 32비트를 날린다는 것. 그럼 31억이 아니고 이상한 숫자가 나오게 된다.

그러니 int를 long으로 바꾸는게 나음. .


☞자동형 변환 (Implicit Conversion)
byte > short / char > int > long > float > double
규칙1. 자료형의 크기가 큰 방향으로 형 변환
규칙2. 자료형의 크기에 상관없이 정수 자료형보다 실수 자료형 우선
ex) double num1 = 30; 
ex) sysout(59L + 34.5);
		float num3 = 1.12f;
		System.out.println(l);
		
		double pi = 3.14;
		int num4 = (int)pi;
		System.out.println(num1);

int범위 이상에서는 소숫점 값을 보존하는 방향으로 실수 자료형이 선택됨 
int범위 이하가 문제.
	short n1 = 10;
	short n2 = 20;
	short n3 = (short)(n1 + n2) ; ★★★
	sysout(n3);
30 //이게 바로 명시적 형변환 = 강제적 형변환

short 범위여도 int로 형 변환.

		
		long 1 = 3100000000L; 
		num5 = (int)num5 ;
 //큰 걸 자를땐 위험을 감수하고 해야함 
		
		int num1 = 3;
		int num2 = 4;
		double result = num1 / num2; //0.75 = 3/4
		System.out.println(result);
0.0 // 왜 0.75가 안나올까? 
정수 계산이라서. 
double result = 0.75; 에 대한 데이타타입이 뭐여? 법칙이 있음. 
int, int 연산을 하면 결과값이 소숫점이고 나발이고 신경 쓰지 않음. 따라서 result는 실질적으로 0인데 double을 붙이니까 소숫점처럼 0.0이 나오는 것.
☞(double)을 붙여서 명시적 형 변환
public class EscapeSequences2 {
	public static void main(String[] args) {
		int num1 = 3;
		int num2 = 4;
		double result = num1 / num2; 
		System.out.println(result);
0.0
		
		
		int num3 = 3;
		int num4 = 4;
		double result1 = num3 / (double)num4;
		System.out.println(result1);
0.75
		
		int num5 = 3;
		int num6 = 4;
		double result2 = (double)(num5 / num6);
		System.out.println(result2);
0.0
		
		int num7 = 3;
		int num8 = 4;
		double result3 = (double)num7 / num8;
		System.out.println(result3);
0.75



♨quiz	
 국어:50, 영어:70, 수학:95
 총점과 평균을 구하시오. 단, 평균은 소숫점까지 나오도록 하시오.
		
public class GradeMain {
	public static void main(String[] args) {
		
		int kor, eng, math; //변수명 주의 ! 
		kor = 50; 
		eng = 70;
		math = 95;
		
		int total = kor + eng + math;
		System.out.println("총점: " + total );
		
		 double avg = (double) total / 3;  // double avg = total / 3.0; 이렇게 해도 값 나옴
		 System.out.println("평균: " + avg);

총점: 215
평균: 71.66666666666667




☞연산자의 우선순위와 결합방향

2-1-3*2  > 3*2 우선순위 적용
=2-1-6  >2-1 결합 방향 적용
=1-6
결합방향은 우선순위가 같을 때 적용하는 기준
컴퓨터는 인간이 만든대로 하기 때문에 반드시 우선순위를 적용해줘야 함. 

연산자 우선 순위 중 가장 높은 것은 괄호. ( ) 
☞대입 연산자: = + - * / % 
public class ArithOp {
	public static void main(String[] args) {
		int num1 = 7;
		int num2 = 3;
		
		System.out.println("num1 + num2 =" + (num1 + num2));
num1 + num2 =10 //문자열 형 + 정수형 > 둘의 타입이 다름. 
		System.out.println("num1 - num2 =" + (num1 - num2));
num1 - num2 =4
		System.out.println("num1 * num2 =" + (num1 * num2));
num1 * num2 =21
		System.out.println("num1 / num2 =" + (num1 / num2));
num1 / num2 =2
		System.out.println("num1 % num2 =" + (num1 % num2)); 
num1 % num2 =1 //전산에서는 /이거보다는 %이거를 많이 쓰는데. 나누기가 아니라 떨거지를 의미한다. 7/3=2와 1/3. 그래서 %사용하면 1이 나옴

		int num1 = 7;
		int num2 = 3;
		System.out.println("num1 / num2 =" + (num1 / num2)); 
	//정수형 나눗셈 진행 
		System.out.println("num1 / num2 =" + (7.0 / 3.0)); 
	//실수형 나눗셈 진행

☞복합 대입 연산자:
int num1 = 7;
num1 = num1 + 1; 
→ num1 += 1;

num = num*3;
→ num*=3;

A &= B 
A = A&B

A^=B
A + A^B



public class CompAssignOp {
	public static void main(String[] args) {
		
		short num=10;
		num=(short)(num+77L); //형 변환 안하면 컴파일 오류 발생 
		//L 롱은 64비트니까

		int rate=3;
		rate=(int)(rate*3.5); //형 변환 안하면 컴파일 오류 발생 
		//(int)지우면 에러남

		System.out.println(num);
		System.out.println(rate);
		
		num=10;
		num+=77L; //복합대입연산자 쓰면 형 변환 불필요 ★
		rate=3;
		rate*=3.5; //형 변환 불필요 ★
		System.out.println(num);
		System.out.println(rate);



☞관계 연산자: <, >, <=, >=, ==, !=
public class RelationalOp {
	public static void main(String[] args) {
		
		System.out.println("3>=2: "+(3>=2)); 
		System.out.println("3<=2: "+(3<=2));
		System.out.println("7.0==7: "+(7.0==7)); // 둘이 같은 거냐
		System.out.println("7.0!=2: "+(7.0!=7)); // 둘이 다른거냐

3>=2: true
3<=2: false
7.0==7: true
7.0!=2: false


boolen안 썼는데 어떻게 true false가 나올까? (함수 맛보기 on)
boolean bool=(3>=2);
System.out.println("3>=2: "+bool);

public void println(boolean x =(3>=2))
public void println(boolean x =true)

함수 안에 변수 선언이 있고 boolen이 겉보기에 생략되어 있는 것 같을 뿐 println()안에 연산이 들어가있음....(?)		 

☞엔드 연산자(&&)는 양옆으로 불린(boolean)타입이 와야 함. 두 개의 바가 true여야 true고 둘 중 하나라도 false면 false가 뜸 
		bool=true && false; 
		System.out.println(bool);
false

		bool=true && true;
		System.out.println(bool);
true
		
		
☞오어 연산자(||)는 한 개라도 true가 있으면 true. ||이거는 쉬프트 누르고 엔터 위에 있는거 누르면 나옴. 백슬래쉬 ㅋㅋ 
		bool=true||false; 
		System.out.println(bool);
true

		bool=true||true;
		System.out.println(bool);
true
		bool=false||false;
		System.out.println(bool);
false


public class LogicalOp {

	public static void main(String[] args) {
		int num1 = 11;
		int num2 = 22;
		boolean result;
		
		//변수 num1에 저장된 값이 1과 100사이의 수인가?
		result=(1<num1)&&(num1<100); 
		System.out.println("1초과 100미만인가? "+result);
/* 양쪽 사이드에는 true false 연산 */
		
	 ■이해요■//변수 num2에 저장된 값이 2 또는 3의 배수인가? 
		result = ((num2%2)==0)||((num2%3)==0);
		System.out.println("2또는 3의 배수인가? " + result);
/* ((num2%2)==0)는 2로 나눠서 나머지가 0 (짝수표현이자 2의 배수) 
((num2%3)==0)은 3으로 나눠서 나머지가 0을 뜻함.  (3의 배수 표현)
|| 22가 2의 배수 이거나 3의 배수이거나. 하나라도 true면 true 찍힘
cf)오징어게임 홀짝 게임을 프로그램으로 옮기세요.로도 가능. */
		

	 ■이해요■//변수 num1이 0인가?
		result=!(num1 !=0);
		System.out.println("0인가? "+result);

/* 11 !=0 → 11은 0이 아니다. true.
!true  → false
!false → true */

1초과 100미만인가? true
2또는 3의 배수인가? true
0인가? false

		
		
